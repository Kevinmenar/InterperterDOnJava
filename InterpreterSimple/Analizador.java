/* Analizador.java */
/* Generated By:JavaCC: Do not edit this line. Analizador.java */
import java.io.*;
import java.util.Scanner;

class Analizador implements AnalizadorConstants {
        //Menu del sistema
        static Scanner scanner = new Scanner(System.in);
    static int select = -1;

    public static boolean modeTableOn=false;
    public static boolean modeTokenOn=false;

        public static String Code="";
        public static String TokenElem="";
        public static String TablaDeAsignaciones="";
        public static void main( String[] args )throws ParseException, Exception
        {
                try
                {
                        Analizador analizador = new Analizador( System.in ) ;
                        analizador.Config();
                        if(modeTableOn)
                        {
                                System.out.println("\u005ctTabla asignaciones:\u005cn");
                                System.out.println(TokenAsignaciones.tabla.toString());
                        }
                        else if(modeTokenOn)
                        {
                                System.out.println("\u005ctTokens con cada una de las keys:\u005cn");
                                System.out.println(TokenAsignaciones.tabla.toString());
                        }

                System.out.println("\u005cn-------------------------------------------\u005cn\u005ctResultado:\u005cn"+Code+"\u005cn-----------------------------------------\u005cn");
                        System.out.println();
                try{
                  PrintWriter writer = new PrintWriter("test.java", "UTF-8");
                  writer.println(Code);
                  writer.close();
              } catch (IOException e) {
                 // do something
              }

                        System.out.println("\u005ctAnalizador ha terminado.");
                }
                catch(Exception e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("\u005ctAnalizador ha terminado.");
                }

        }

  static final public void Config() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONFIGTOKENS:{
      jj_consume_token(CONFIGTOKENS);
      Programa();
      break;
      }
    case CONFIGTABLA:{
      jj_consume_token(CONFIGTABLA);
      Programa();
      break;
      }
    case PROGRAMA:{
      Programa();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Programa() throws ParseException {//System.out.println("Programa");
        Token identificador;
    jj_consume_token(PROGRAMA);
Code+="\u005cnclass ";
    identificador = jj_consume_token(IDENTIFIER);
Code+=identificador.toString();
    jj_consume_token(DOUBLEPOINT);
Code+="\u005cn{\u005cn";
    Sector();
    jj_consume_token(FIN);
Code+="\u005cn}\u005cn";
    jj_consume_token(0);
  }

  static final public void Sector() throws ParseException {
    if (jj_2_1(2)) {
      VariablesGlobales();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIN:{
        Principal();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void VariablesGlobales() throws ParseException {Token identificador;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIVATE:{
      jj_consume_token(PRIVATE);
Code+="private ";
      break;
      }
    case PUBLIC:{
      jj_consume_token(PUBLIC);
Code+="public ";
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
Code+="int ";
      break;
      }
    case DEC:{
      jj_consume_token(DEC);
Code+="float ";
      break;
      }
    case STR:{
      jj_consume_token(STR);
Code+="String ";
      break;
      }
    case CHR:{
      jj_consume_token(CHR);
Code+="char ";
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    identificador = jj_consume_token(IDENTIFIER);
Code+=identificador.toString();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
Code+=",";
      jj_consume_token(IDENTIFIER);
Code+="identGeneric";
    }
    jj_consume_token(SEMICOLON);
Code+=";\u005cn";
    Sector();
  }

  static final public void Principal() throws ParseException {TokenAsignaciones.SetTables();
    jj_consume_token(MAIN);
Code+="public static void main( String[] args )";
    jj_consume_token(DOUBLEPOINT);
Code+="\u005cn{\u005cn";
    Sentencias();
    jj_consume_token(FIN);
Code+="\u005cn}\u005cn";
  }

  static final public void VariablesLocales() throws ParseException {int td;
        Token var;
    TiposDatos();
td = token.kind;
    var = jj_consume_token(IDENTIFIER);
TokenAsignaciones.InsertarSimbolo(var, td);
                {Code+=var.toString();}
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      VariablesAsignacion(var);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
Code+=",";
      var = jj_consume_token(IDENTIFIER);
TokenAsignaciones.InsertarSimbolo(var, td);
                        Code+="id";
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASIGNACION:{
        VariablesAsignacion(var);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    }
    jj_consume_token(SEMICOLON);
Code+=";\u005cn";
    VS();
  }

  static final public void VariablesAsignacion(Token v1) throws ParseException {Token v2;
        Token v3;
        String res;
        boolean imp = false;
    jj_consume_token(ASIGNACION);
Code+="=";
    TiposAsignaciones();
v2 = token;
                res = TokenAsignaciones.checkAsing(v1, v2);

                if(res != " ")
                {
                        //System.out.println(res);
                        imp = true;
                }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case NUMBER:
      case IDENTIFIER:
      case DECIMAL:
      case CADENA:
      case CARAC:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      OpAritmetico();
      TiposAsignaciones();
v3 = token;
                res = TokenAsignaciones.checkAsing(v1, v3);

                if(res != " " && !imp)
                {
                        //System.out.println(res);
                }
    }
  }

  static final public void VS() throws ParseException {
    if (jj_2_2(3)) {
      VariablesLocales();
    } else {
      Sentencias();
    }
  }

  static final public void Sentencias() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case FOR:
      case SWITCH:
      case DO:
      case WHILE:
      case WRITE:
      case READ:
      case INT:
      case DEC:
      case CHR:
      case STR:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case DEC:
      case CHR:
      case STR:{
        VariablesLocales();
        break;
        }
      case IF:{
        SentenciaIf();
        break;
        }
      case FOR:{
        SentenciaFor();
        break;
        }
      case DO:
      case WHILE:{
        SentenciaDo();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        if (jj_2_3(2)) {
          SentenciaAsignacion();
          jj_consume_token(SEMICOLON);
TokenAsignaciones.segunda = 0;Code+=";\u005cn";
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WRITE:{
            SentenciaWrite();
            break;
            }
          case READ:{
            SentenciaRead();
            jj_consume_token(SEMICOLON);
Code+=";\u005cn";
            break;
            }
          case SWITCH:{
            SentenciaSwitch();
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

//Sentencia IF
  static final public void SentenciaIf() throws ParseException {
    jj_consume_token(IF);
Code+="if(";
    ComparacionesAnidadas();
    jj_consume_token(DOUBLEPOINT);
Code+=")\u005cn\u005ct{\u005cn";
    Sentencias();
    jj_consume_token(FIN);
Code+="\u005cn}\u005cn";
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:
      case ELSEIF:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      Sino();
    }
  }

  static final public void Sino() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
Code+="else";
      jj_consume_token(DOUBLEPOINT);
Code+="\u005cn{\u005cn";
      Sentencias();
      jj_consume_token(FIN);
Code+="\u005cn}\u005cn";
      break;
      }
    case ELSEIF:{
      jj_consume_token(ELSEIF);
Code+="else";Code+=" ";Code+="if(";
      ComparacionesAnidadas();
      jj_consume_token(DOUBLEPOINT);
Code+=")\u005cn{\u005cn";
      Sentencias();
      jj_consume_token(FIN);
Code+="}";
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ComparacionesAnidadas() throws ParseException {
    Comparaciones();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:
      case AND:
      case NUMBER:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:
      case AND:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          jj_consume_token(AND);
Code+="&&";
          break;
          }
        case OR:{
          jj_consume_token(OR);
Code+="||";
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      Comparaciones();
    }
  }

  static final public void Comparaciones() throws ParseException {
    Valor();
    Operadores();
    Valor();
  }

  static final public void Valor() throws ParseException {Token identificador;
    if (jj_2_4(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        identificador = jj_consume_token(IDENTIFIER);
Code+=identificador.toString();
        break;
        }
      case NUMBER:{
        identificador = jj_consume_token(NUMBER);
Code+=identificador.toString();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case IDENTIFIER:{
        Expresion();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Expresion() throws ParseException {Token identificador;
    if (jj_2_5(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        identificador = jj_consume_token(NUMBER);
Code+=identificador.toString();
        break;
        }
      case IDENTIFIER:{
        identificador = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
Code+=identificador.toString();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          identificador = jj_consume_token(IDENTIFIER);
Code+=identificador.toString();
          break;
          }
        case NUMBER:{
          identificador = jj_consume_token(NUMBER);
Code+=identificador.toString();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OpAritmetico();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          identificador = jj_consume_token(IDENTIFIER);
Code+=identificador.toString();
          break;
          }
        case NUMBER:{
          identificador = jj_consume_token(NUMBER);
Code+=identificador.toString();
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Operadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      jj_consume_token(EQ);
Code+="==";
      break;
      }
    case LE:{
      jj_consume_token(LE);
Code+="<=";
      break;
      }
    case GE:{
      jj_consume_token(GE);
Code+="<";
      break;
      }
    case NE:{
      jj_consume_token(NE);
Code+="!=";
      break;
      }
    case GR:{
      jj_consume_token(GR);
Code+=">";
      break;
      }
    case MN:{
      jj_consume_token(MN);
Code+=">=";
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public int OpAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
Code+="+";{if ("" != null) return 1;}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
Code+="-";{if ("" != null) return 1;}
      break;
      }
    case MULTIPLY:{
      jj_consume_token(MULTIPLY);
Code+="*";{if ("" != null) return 1;}
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
Code+="/";{if ("" != null) return 1;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
{if ("" != null) return 0;}
{if ("" != null) return 0;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public void TiposDatos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
Code+="int ";
      break;
      }
    case DEC:{
      jj_consume_token(DEC);
Code+="float ";
      break;
      }
    case STR:{
      jj_consume_token(STR);
Code+="String ";
      break;
      }
    case CHR:{
      jj_consume_token(CHR);
Code+="char ";
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Sentencia FOR
  static final public void SentenciaFor() throws ParseException {
    jj_consume_token(FOR);
Code+="for(";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case DEC:
    case CHR:
    case STR:{
      DeclaracionUnaVariable();
      break;
      }
    case IDENTIFIER:{
      SentenciaAsignacion();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
Code+=";";
    Comparaciones();
    jj_consume_token(SEMICOLON);
Code+=";";
    SentenciaAsignacion();
    jj_consume_token(DOUBLEPOINT);
Code+=")\u005cn{\u005cn";
    Sentencias();
    jj_consume_token(FIN);
Code+="}";
  }

  static final public void DeclaracionUnaVariable() throws ParseException {int td;
        Token var;
    TiposDatos();
td = token.kind;
    var = jj_consume_token(IDENTIFIER);
TokenAsignaciones.InsertarSimbolo(var, td);
                System.out.print(var.toString());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      VariablesAsignacion(var);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void SentenciaDo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DO:{
      jj_consume_token(DO);
Code+="do";
      jj_consume_token(DOUBLEPOINT);
Code+="\u005cn{\u005cn";
      Sentencias();
      jj_consume_token(FIN);
Code+="\u005cn}\u005cn";
      jj_consume_token(WHILE);
Code+="\u005cnwhile(";
      Comparaciones();
      jj_consume_token(FIN);
Code+=")\u005cn";
      break;
      }
    case WHILE:{
      SentenciaWhile();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SentenciaWhile() throws ParseException {
    jj_consume_token(WHILE);
Code+="while(";
    Comparaciones();
    jj_consume_token(DOUBLEPOINT);
Code+=")\u005cn{\u005cn";
    Sentencias();
    jj_consume_token(FIN);
Code+="\u005cn}\u005cn";
  }

  static final public void SentenciaAsignacion() throws ParseException {Token v1;
        Token v2;
        Token v3;
        int aux;
        String res;
        boolean imp = false;
    v1 = jj_consume_token(IDENTIFIER);
Code+=v1.toString();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      jj_consume_token(ASIGNACION);
Code+="=";
      TiposAsignaciones();
v2 = token;
        res = TokenAsignaciones.checkAsing(v1, v2);
        if(res != " ")
        {
                System.out.println(res);
                imp = true;
        }
      label_7:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_7;
        }
        OpAritmetico();
        TiposAsignaciones();
v3 = token;
        res = TokenAsignaciones.checkAsing(v1, v3);

        if(res != " " && !imp)
        {
                System.out.println(res);
        }
      }
      break;
      }
    case INCR:
    case DECR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
        jj_consume_token(INCR);
Code+="++";
        break;
        }
      case DECR:{
        jj_consume_token(DECR);
Code+="--";
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
res = TokenAsignaciones.checkVariable(v1);

        if(res != " ")
                System.out.println(res);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TiposAsignaciones() throws ParseException {Token elem;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      elem = jj_consume_token(IDENTIFIER);
Code+=elem.toString();
      break;
      }
    case NUMBER:{
      elem = jj_consume_token(NUMBER);
Code+=elem.toString();
      break;
      }
    case DECIMAL:{
      elem = jj_consume_token(DECIMAL);
Code+=elem.toString();
      break;
      }
    case CADENA:{
      elem = jj_consume_token(CADENA);
Code+=elem.toString();
      break;
      }
    case CARAC:{
      elem = jj_consume_token(CARAC);
Code+=elem.toString();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Sentencia WRITE
  static final public void SentenciaWrite() throws ParseException {
    jj_consume_token(WRITE);
Code+="System.out.println(";
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case IDENTIFIER:
      case CADENA:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case IDENTIFIER:{
        Expresion();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_9;
          }
          jj_consume_token(PLUS);
          jj_consume_token(CADENA);
        }
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_10;
          }
          jj_consume_token(PLUS);
          Expresion();
        }
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
Code+=");";
  }

//Sentencia READ
  static final public void SentenciaRead() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
  }

  static final public void SentenciaSwitch() throws ParseException {Token elem;
    jj_consume_token(SWITCH);
Code+="switch(";
    elem = jj_consume_token(IDENTIFIER);
Code+=elem.toString();
    jj_consume_token(DOUBLEPOINT);
Code+=")\u005cn{\u005cn";
    label_11:
    while (true) {
      jj_consume_token(CASE);
Code+="case";Code+=" ";
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        elem = jj_consume_token(IDENTIFIER);
Code+=elem.toString();
        break;
        }
      case CADENA:{
        elem = jj_consume_token(CADENA);
Code+=elem.toString();
        break;
        }
      case CARAC:{
        elem = jj_consume_token(CARAC);
Code+=elem.toString();
        break;
        }
      case NUMBER:{
        elem = jj_consume_token(NUMBER);
Code+=elem.toString();
        break;
        }
      case DECIMAL:{
        elem = jj_consume_token(DECIMAL);
Code+=elem.toString();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOUBLEPOINT);
Code+=":\u005cn";
      label_12:
      while (true) {
        SentenciaAsignacion();
        jj_consume_token(SEMICOLON);
Code+=";\u005cn";
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_12;
        }
      }
      jj_consume_token(BREAK);
Code+="break";
      jj_consume_token(SEMICOLON);
Code+=";\u005cn";
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAUL:{
      jj_consume_token(DEFAUL);
Code+="default";
      jj_consume_token(DOUBLEPOINT);
Code+=":\u005cn";
      SentenciaAsignacion();
      jj_consume_token(SEMICOLON);
Code+=";\u005cn";
      jj_consume_token(BREAK);
Code+="break";
      jj_consume_token(SEMICOLON);
Code+=";\u005cn";
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
Code+="\u005cn}\u005cn";
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_14()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_scan_token(CHR)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(CARAC)) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(CHR)) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_scan_token(ASIGNACION)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_scan_token(ASIGNACION)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x40000000,0xc000000,0x0,0x800000,0x2,0x800000,0x2,0x3c,0x0,0x0,0x0,0x0,0x0,0xc000,0xc000,0xc000,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00,0x3c,0x0,0x0,0x2,0x0,0xc0,0xc2,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6000,0x0,0x0,0x78000,0x0,0x0,0x0,0x0,0xf80000,0x178f19,0x78309,0xc10,0x6,0x6,0x180000,0x0,0x0,0x180000,0x180000,0x180000,0x180000,0x180000,0x180000,0x0,0x0,0x78000,0x178000,0x0,0x300,0x0,0x0,0xf80000,0x580000,0x0,0x0,0x580000,0xf80000,0x100000,0x20,0x80,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
