PARSER_BEGIN(Analizador)
import java.io.*;
class Analizador 
{
	public static void main( String[] args )throws ParseException, Exception
	{
		try
		{		
     		Analizador analizador = new Analizador( System.in ) ;
			analizador.Programa();
			System.out.println("\tAnalizador ha terminado.");			
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\tAnalizador ha terminado.");
		}
	}
}
PARSER_END(Analizador)

TOKEN : 
{ 
	  <ASIGNACION : "=">  //1
	| <PLUS : "+" >  //2
	| <MINUS:"-"> //3
	| <MULTIPLY:"*">//4 
	| <DIVIDE:"/"> //5
	| <INCR: "++" > //6
	| <DECR: "--" > //7
	
}

TOKEN:
{
	  <EQ: "==" > //8
	| <LE: "<=" > //9
	| <MN: "<" > //10
	| <GE: ">=" > //11
	| <GR: ">" > //12
	| <NE: "!=" > //13
	| <OR: "||" > //14
	| <AND: "&&"> //15
}

TOKEN:
{
      <LPAREN: "(" >//16 
	| <RPAREN: ")" > //17
	| <LBRACE: "{" > //18
	| <RBRACE: "}" > //19
	| <LBRACKET: "[" > //20
	| <RBRACKET: "]" > //21
	| <SEMICOLON: ";" > //22
	| <COMMA: "," > //23
	| <DOT: "." > //24
	| <DOUBLECOMMA: "\""> //25
}

TOKEN:
{
	  <PUBLIC: "publico"> //26
	| <PRIVATE: "privado"> //27
	| <STATIC: "estatico"> //28
	| <VOID: "vacio"> //29
	| <MAIN: "principal()"> //30
	| <PROGRAMA: "programa" > // 31
	| <IF: "si" > //32
	| <ELSE:"o_si" > //33 
	| <ELSEIF:"sino" > // 34
	| <FOR:"repetir" > // 35
	| <SWITCH:"alternativas" > // 36 
	| <CASE:"opcion" > // 37
	| <BREAK:"salir" > //38
	| <DEFAUL:"defecto" > // 39
	| <DO:"realice" > //40
	| <WHILE:"ciclo" > //41
	| <WRITE:"imprima" > // 42
	| <READ:"lea" > //43
	| <FIN:"fin"> //44
}

TOKEN:
{
	  <INT:"numero">//45
	| <DEC: "decimal">//46 
	| <CHR: "caracter"> //47
	| <STR: "cadena">//48
	| <NUMBER : (["0"-"9"])+> // 49  
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>  //50
	| <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > //51
	| <CADENA : <DOUBLECOMMA>["a"-"z","A"-"Z","0"-"9"," "](["a"-"z","A"-"Z","0"-"9"," ",":",";","."])*<DOUBLECOMMA>> //52
	| <CARAC : "'"["a"-"z","A"-"Z","0"-"9"]"'" >//53 
	| <DOUBLEPOINT : ":">//54
}


SKIP : 
{ 
	" "| "\r" | "\n" |  "\r\n" | "\t" //55
}

void Programa() :
{}
{
	<PROGRAMA><IDENTIFIER><DOUBLEPOINT>Sector()<FIN><EOF>	
}

void Sector():
{}
{
	LOOKAHEAD(2)VariablesGlobales() | Principal()
}


void VariablesGlobales():
{}
{
	(<PRIVATE>|<PUBLIC>)(<INT>|<DEC>|<STR>|<CHR>) <IDENTIFIER>(<COMMA><IDENTIFIER>)* <SEMICOLON> Sector()
}

void Principal():
{
	TokenAsignaciones.SetTables();	
}
{
	<MAIN><DOUBLEPOINT>
	Sentencias()
	<FIN> 	
}


void VariablesLocales():
{
	int td;		
	Token var;	
}
{
(
	(TiposDatos())
	{
		td = token.kind;
	}
	var = <IDENTIFIER> 
	{		
		TokenAsignaciones.InsertarSimbolo(var, td);
	} 
	[VariablesAsignacion(var)]
	(
		<COMMA>
		var = <IDENTIFIER> 
		{		
			TokenAsignaciones.InsertarSimbolo(var, td);
		} 
		[VariablesAsignacion(var)]
	)*	
	<SEMICOLON> 
)
	(VS())
}

void VariablesAsignacion(Token v1):
{
	Token v2;
	Token v3;
	String res;	
	boolean imp = false;
}
{
	<ASIGNACION>
	(TiposAsignaciones())
	  {  
		v2 = token;
		res = TokenAsignaciones.checkAsing(v1, v2);
		
		if(res != " ")
		{
			System.out.println(res);
			imp = true;
		}
	  }
	  (OpAritmetico()
	  TiposAsignaciones()
	  {  
		v3 = token;
		res = TokenAsignaciones.checkAsing(v1, v3);
		
		if(res != " " && !imp)
		{
			System.out.println(res);
		}
	  })*
}

void VS():
{}
{
	LOOKAHEAD(3)VariablesLocales() | Sentencias()
}

void Sentencias():
{}
{
	(	
	  VariablesLocales()	
    | SentenciaIf() 	
	| SentenciaFor()
	| SentenciaDo()	
	| LOOKAHEAD(2)SentenciaAsignacion()<SEMICOLON>{TokenAsignaciones.segunda = 0;}
	| SentenciaWrite()
	| SentenciaRead()<SEMICOLON>
	| SentenciaSwitch()
	)*
}

//Sentencia IF
void SentenciaIf():
{}
{
	<IF> ComparacionesAnidadas()  <DOUBLEPOINT> Sentencias() <FIN> (Sino())* 
}

void Sino():
{}
{
	<ELSE><DOUBLEPOINT> Sentencias() <FIN> | <ELSEIF>  ComparacionesAnidadas()  <DOUBLEPOINT> Sentencias() <FIN>
}

void ComparacionesAnidadas():
{}
{
	  Comparaciones() ([(<AND>|<OR>)] Comparaciones())*
}


void Comparaciones():
{}
{
	Valor()Operadores()Valor()
}

void Valor():
{}
{
	LOOKAHEAD(2) (<IDENTIFIER> | <NUMBER>) | Expresion()
}

void Expresion():
{}
{
    LOOKAHEAD(2)(<NUMBER> | <IDENTIFIER>)
	|(<IDENTIFIER>|<NUMBER>) OpAritmetico() (<IDENTIFIER>|<NUMBER>) 
}

void Operadores():
{}
{
	    <EQ> 
	  | <LE> 
	  | <GE> 
	  | <NE> 
	  | <GR> 
	  | <MN> 
}

int OpAritmetico():
{}
{
	  (<PLUS> {return 1;})
	| (<MINUS> {return 1;})
	| (<MULTIPLY> {return 1;})
	| (<DIVIDE> {return 1;})
	| ({return 0;})
	
	{return 0;}
}

void TiposDatos():
{}
{
	 <INT>
	|<DEC>
	|<STR>
	|<CHR>
}

//Sentencia FOR
void SentenciaFor():
{}
{
	<FOR> (DeclaracionUnaVariable()|SentenciaAsignacion())<SEMICOLON> Comparaciones() <SEMICOLON> SentenciaAsignacion() <DOUBLEPOINT> Sentencias() <FIN> 
}

void DeclaracionUnaVariable():
{
	int td;
	Token var;	
}
{	
	(TiposDatos())
	{
		td = token.kind;
	}
	var = <IDENTIFIER> 
	{		
		TokenAsignaciones.InsertarSimbolo(var, td);
	} 
	[VariablesAsignacion(var)]		
}

void SentenciaDo():
{}
{
	<DO> <DOUBLEPOINT>Sentencias() <FIN> <WHILE>  Comparaciones() <FIN> | SentenciaWhile()
}

void SentenciaWhile():
{}
{
	<WHILE> Comparaciones()  <DOUBLEPOINT> Sentencias() <FIN>
}

void SentenciaAsignacion():
{
	Token v1;
	Token v2;
	Token v3;
	int aux;
	String res;
	boolean imp = false;
}
{
  v1 = <IDENTIFIER> 
  (<ASIGNACION>
  (TiposAsignaciones())
  {  
    v2 = token;
	res = TokenAsignaciones.checkAsing(v1, v2);
	
	if(res != " ")
	{
		System.out.println(res);
		imp = true;
	}
  }
  (LOOKAHEAD(2)OpAritmetico()
  TiposAsignaciones()
  {  
    v3 = token;
	res = TokenAsignaciones.checkAsing(v1, v3);
	
	if(res != " " && !imp)
	{
		System.out.println(res);
	}
  })*  
  |
  (<INCR>|<DECR>)
  {  
	res = TokenAsignaciones.checkVariable(v1);
	
	if(res != " ")	
		System.out.println(res);	
  })
  
  //SentenciaAsignacion ya trae <SEMICOLON> en el metodo Sentencias()
}

void TiposAsignaciones():
{}
{
	  <IDENTIFIER> 
	| <NUMBER> 
	| <DECIMAL> 
	| <CADENA> 
	| <CARAC>
}

//Sentencia WRITE
void SentenciaWrite():
{}
{
	<WRITE> (Expresion()(<PLUS><CADENA>)*|<CADENA>(<PLUS>Expresion())*)*  <SEMICOLON> 
}

//Sentencia READ
void SentenciaRead():
{}
{
	<READ><LPAREN><RPAREN>
}

void SentenciaSwitch():
{}
{
	<SWITCH><IDENTIFIER><DOUBLEPOINT>(<CASE>(<IDENTIFIER>|<CADENA>|<CARAC>|<NUMBER>|<DECIMAL>)<DOUBLEPOINT>(SentenciaAsignacion()<SEMICOLON>)+ <BREAK><SEMICOLON>)+[<DEFAUL><DOUBLEPOINT>(SentenciaAsignacion()<SEMICOLON>)<BREAK><SEMICOLON>]<FIN>
}

