/* AnalizadorTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AnalizadorTokenManager.java */
import java.io.*;
import java.util.Scanner;

/** Token Manager. */
@SuppressWarnings("unused")public class AnalizadorTokenManager implements AnalizadorConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fffffc000000L) != 0L)
         {
            jjmatchedKind = 52;
            return 1;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x7fffcfc000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x300000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x7e7fefc000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x180000000000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x600000000L) != 0L)
            return 1;
         if ((active0 & 0x7e7f8fc000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x24020000000L) != 0L)
            return 1;
         if ((active0 & 0x7e5b8dc000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4802000000000L) != 0L)
            return 1;
         if ((active0 & 0x36598dc000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x105880c000000L) != 0L)
            return 1;
         if ((active0 & 0x26010d0000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000090000000L) != 0L)
            return 1;
         if ((active0 & 0x601040000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x601040000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x601000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x601000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 10;
            return 1;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x600000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 11;
            return 1;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x600000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 18;
            return 1;
         }
         return -1;
      case 19:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 19;
            return 1;
         }
         return -1;
      case 20:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 20;
            return 1;
         }
         return -1;
      case 21:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 21;
            return 1;
         }
         return -1;
      case 22:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 22;
            return 1;
         }
         return -1;
      case 23:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 23;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 61);
      case 10:
         return jjStopAtPos(0, 59);
      case 13:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 32:
         return jjStopAtPos(0, 57);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 34:
         return jjStartNfaWithStates_0(0, 25, 3);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 40:
         return jjStopAtPos(0, 16);
      case 41:
         return jjStopAtPos(0, 17);
      case 42:
         return jjStopAtPos(0, 4);
      case 43:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 44:
         return jjStopAtPos(0, 23);
      case 45:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 46:
         return jjStopAtPos(0, 24);
      case 47:
         return jjStopAtPos(0, 5);
      case 58:
         return jjStopAtPos(0, 56);
      case 59:
         return jjStopAtPos(0, 22);
      case 60:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 61:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 62:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x600000000000L);
      case 91:
         return jjStopAtPos(0, 20);
      case 93:
         return jjStopAtPos(0, 21);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x6020000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1008000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2400000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xcc000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10800000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4300000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 123:
         return jjStopAtPos(0, 18);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 125:
         return jjStopAtPos(0, 19);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 38:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 43:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 45:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x6004020000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1098800000000L);
      case 105:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x120200000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x640000000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xc8000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800004000000L);
      case 124:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1022020000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x48000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x640800000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000010000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4809800000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 105:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1006020000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x30004000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x640000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2008040000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x650004000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x801080000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x810000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000080000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10004000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x850000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x640000000000L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x2008000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x600000000000L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 1);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 1);
         break;
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x600000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x600000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(10, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 36, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L);
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 45, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(24, 46, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3ff000100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfff400100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 6:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 39 && kind > 55)
                     kind = 55;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 46)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\75", "\53", "\55", "\52", "\57", "\53\53", "\55\55", "\75\75", "\74\75", 
"\74", "\76\75", "\76", "\41\75", "\174\174", "\46\46", "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\42", "\160\165\142\154\151\143\157", 
"\160\162\151\166\141\144\157", "\145\163\164\141\164\151\143\157", "\166\141\143\151\157", 
"\160\162\151\156\143\151\160\141\154\50\51", "\160\162\157\147\162\141\155\141", "\163\151", "\163\151\156\157", 
"\157\137\163\151", "\162\145\160\145\164\151\162", 
"\141\154\164\145\162\156\141\164\151\166\141\163", "\157\160\143\151\157\156", "\163\141\154\151\162", 
"\144\145\146\145\143\164\157", "\162\145\141\154\151\143\145", "\143\151\143\154\157", 
"\151\155\160\162\151\155\141", "\154\145\141", "\146\151\156", 
"\111\155\160\162\151\155\151\162\124\157\153\145\156\163", 
"\111\155\160\162\151\155\151\162\124\141\142\154\141\101\163\151\147\156\141\143\151\157\156\145\163", "\156\165\155\145\162\157", "\144\145\143\151\155\141\154", 
"\143\141\162\141\143\164\145\162", "\143\141\144\145\156\141", null, null, null, null, null, "\72", null, null, 
null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 57 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
              Analizador.TokenElem=Analizador.TokenElem+"espacio | 57\u005cn";
         break;
      case 58 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                Analizador.TokenElem=Analizador.TokenElem+"CarriageReturn | 58\u005cn";
         break;
      case 59 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                Analizador.TokenElem=Analizador.TokenElem+"NuevaLinea | 59\u005cn";
         break;
      case 60 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  Analizador.TokenElem=Analizador.TokenElem+"r n | 60\u005cn";
         break;
      case 61 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               Analizador.TokenElem=Analizador.TokenElem+"Tab | 61\u005cn";
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                             Analizador.TokenElem=Analizador.TokenElem+"= | 1\u005cn";
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                        Analizador.TokenElem=Analizador.TokenElem+"+ | 2\u005cn";
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                      Analizador.TokenElem=Analizador.TokenElem+"- | 3\u005cn";
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                         Analizador.TokenElem=Analizador.TokenElem+"* | 4\u005cn";
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                       Analizador.TokenElem=Analizador.TokenElem+"/ | 5\u005cn";
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                        Analizador.TokenElem=Analizador.TokenElem+"++ | 6\u005cn";
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                        Analizador.TokenElem=Analizador.TokenElem+"-- | 7\u005cn";
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                      Analizador.TokenElem=Analizador.TokenElem+"== | 8\u005cn";
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                      Analizador.TokenElem=Analizador.TokenElem+"<= | 9\u005cn";
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                     Analizador.TokenElem=Analizador.TokenElem+"< | 10\u005cn";
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                      Analizador.TokenElem=Analizador.TokenElem+">= | 11\u005cn";
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                     Analizador.TokenElem=Analizador.TokenElem+"> | 12\u005cn";
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                      Analizador.TokenElem=Analizador.TokenElem+"!= | 13\u005cn";
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                      Analizador.TokenElem=Analizador.TokenElem+"|| | 14\u005cn";
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                      Analizador.TokenElem=Analizador.TokenElem+"&& | 15\u005cn";
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                     Analizador.TokenElem=Analizador.TokenElem+"( | 16\u005cn";
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                         Analizador.TokenElem=Analizador.TokenElem+") | 17\u005cn";
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                         Analizador.TokenElem=Analizador.TokenElem+"{ | 18\u005cn";
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                         Analizador.TokenElem=Analizador.TokenElem+"} | 19\u005cn";
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                           Analizador.TokenElem=Analizador.TokenElem+"[ | 20\u005cn";
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                           Analizador.TokenElem=Analizador.TokenElem+"] | 21\u005cn";
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                            Analizador.TokenElem=Analizador.TokenElem+"; | 22\u005cn";
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                        Analizador.TokenElem=Analizador.TokenElem+", | 23\u005cn";
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                      Analizador.TokenElem=Analizador.TokenElem+". | 24\u005cn";
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                              Analizador.TokenElem=Analizador.TokenElem+"\u005c" | 25\u005cn";
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                              Analizador.TokenElem=Analizador.TokenElem+"publico | 26\u005cn";
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                               Analizador.TokenElem=Analizador.TokenElem+"privado | 27\u005cn";
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                               Analizador.TokenElem=Analizador.TokenElem+"estatico | 28\u005cn";
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                          Analizador.TokenElem=Analizador.TokenElem+"vacio | 29\u005cn";
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                                Analizador.TokenElem=Analizador.TokenElem+"principal() | 30\u005cn";
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                  Analizador.TokenElem=Analizador.TokenElem+"programa | 31\u005cn";
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                      Analizador.TokenElem=Analizador.TokenElem+"si | 32\u005cn";
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                         Analizador.TokenElem=Analizador.TokenElem+"sino | 33\u005cn";
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                           Analizador.TokenElem=Analizador.TokenElem+"o_si | 34\u005cn";
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                           Analizador.TokenElem=Analizador.TokenElem+"repetir | 35\u005cn";
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                                   Analizador.TokenElem=Analizador.TokenElem+"alternativas | 36\u005cn";
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                            Analizador.TokenElem=Analizador.TokenElem+"opcion | 37\u005cn";
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                           Analizador.TokenElem=Analizador.TokenElem+"salir | 38\u005cn";
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                               Analizador.TokenElem=Analizador.TokenElem+"defecto | 39\u005cn";
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                          Analizador.TokenElem=Analizador.TokenElem+"realice | 40\u005cn";
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                            Analizador.TokenElem=Analizador.TokenElem+"ciclo | 41\u005cn";
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                             Analizador.TokenElem=Analizador.TokenElem+"imprima | 42\u005cn";
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                        Analizador.TokenElem=Analizador.TokenElem+"lea | 43\u005cn";
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                       Analizador.TokenElem=Analizador.TokenElem+"fin | 44\u005cn";
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                                          Analizador.modeTableOn=true;Analizador.TokenElem=Analizador.TokenElem+"ImprimirTokens | 45\u005cn";
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                                                    Analizador.modeTokenOn=true;Analizador.TokenElem=Analizador.TokenElem+"ImprimirTablaAsignaciones | 46\u005cn";
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                          Analizador.TokenElem=Analizador.TokenElem+"numero | 47\u005cn";
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                            Analizador.TokenElem=Analizador.TokenElem+"decimal | 48\u005cn";
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                              Analizador.TokenElem=Analizador.TokenElem+"caracter | 49\u005cn";
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                           Analizador.TokenElem=Analizador.TokenElem+"cadena | 50\u005cn";
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   Analizador.TokenElem=Analizador.TokenElem+"ERNumber | 51\u005cn";
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                            Analizador.TokenElem=Analizador.TokenElem+"ERIdentificador | 52\u005cn";
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      Analizador.TokenElem=Analizador.TokenElem+"ERDecimal | 53\u005cn";
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                          Analizador.TokenElem=Analizador.TokenElem+"ERCadena | 54\u005cn";
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      Analizador.TokenElem=Analizador.TokenElem+"ERCaracter | 55\u005cn";
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                               Analizador.TokenElem=Analizador.TokenElem+": | 56\u005cn";
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AnalizadorTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public AnalizadorTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3e00000000000000L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[14];
    static private final int[] jjstateSet = new int[2 * 14];

    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    
    static protected char curChar;
}
